<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[WangJinPing]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://jinpingwang.github.io/"/>
  <updated>2015-12-30T02:25:48.266Z</updated>
  <id>http://jinpingwang.github.io/</id>
  
  <author>
    <name><![CDATA[王谨平]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[二维数组中的查找]]></title>
    <link href="http://jinpingwang.github.io/2015/12/30/algorithm/1/"/>
    <id>http://jinpingwang.github.io/2015/12/30/algorithm/1/</id>
    <published>2015-12-30T02:07:21.000Z</published>
    <updated>2015-12-30T02:25:48.266Z</updated>
    <content type="html"><![CDATA[<h2 id="u9898_u76EE_u63CF_u8FF0"><a href="#u9898_u76EE_u63CF_u8FF0" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 </p>
<h2 id="u8F93_u5165_u63CF_u8FF0"><a href="#u8F93_u5165_u63CF_u8FF0" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array： 待查找的二维数组</span><br><span class="line"><span class="keyword">target</span>：查找的数字</span><br></pre></td></tr></table></figure>
<h2 id="u8F93_u51FA_u63CF_u8FF0"><a href="#u8F93_u51FA_u63CF_u8FF0" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查找到返回<span class="literal">true</span>，查找不到返回<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="java_u4EE3_u7801_u5B9E_u73B0"><a href="#java_u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="java代码实现"></a>java代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> boolean <span class="title">find</span><span class="params">(<span class="keyword">int</span> [][] <span class="built_in">array</span>,<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">array</span>.length==<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">int</span> row=<span class="built_in">array</span>.length;</span><br><span class="line">		<span class="keyword">int</span> col=<span class="built_in">array</span>[<span class="number">0</span>].length;</span><br><span class="line">		<span class="keyword">int</span> i=<span class="number">0</span>,j=col-<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(i&lt;row &amp;&amp; j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">array</span>[i][j]==target)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">array</span>[i][j]&gt;target)</span><br><span class="line">				j--;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u7B97_u6CD5_u590D_u6742_u5EA6"><a href="#u7B97_u6CD5_u590D_u6742_u5EA6" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">O</span><span class="params">(m+n)</span></span></span><br></pre></td></tr></table></figure>
<p>注：m，n为分别为数组的行数与列数</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9898_u76EE_u63CF_u8FF0"><a href="#u9898_u76EE_u63CF_u8FF0" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序]]>
    </summary>
    
      <category term="算法" scheme="http://jinpingwang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://jinpingwang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之RandomAccess]]></title>
    <link href="http://jinpingwang.github.io/2015/11/01/javaSourceCode/java.util/RandomAccess/"/>
    <id>http://jinpingwang.github.io/2015/11/01/javaSourceCode/java.util/RandomAccess/</id>
    <published>2015-11-01T01:31:32.000Z</published>
    <updated>2015-12-31T01:58:23.670Z</updated>
    <content type="html"><![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package java.util;</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> for typical instances of the class, this loop:</span><br><span class="line"> <span class="keyword">*</span> <span class="variable">&lt;pre&gt;</span></span><br><span class="line"> <span class="keyword">*</span>     for (int i=0, n=list.size(); i &amp;lt; n; i++)</span><br><span class="line"> <span class="keyword">*</span>         list.get(i);</span><br><span class="line"> <span class="keyword">*</span> <span class="variable">&lt;/pre&gt;</span></span><br><span class="line"> <span class="keyword">*</span> runs faster than this loop:</span><br><span class="line"> <span class="keyword">*</span> <span class="variable">&lt;pre&gt;</span></span><br><span class="line"> <span class="keyword">*</span>     for (Iterator i=list.iterator(); i.hasNext(); )</span><br><span class="line"> <span class="keyword">*</span>         i.next();</span><br><span class="line"> <span class="keyword">*</span> <span class="variable">&lt;/pre&gt;</span></span><br><span class="line"> <span class="keyword">*</span> 说明了实现了这个接口，前一种的访问速度会更快</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"></span><br><span class="line">//标记接口</span><br><span class="line">public interface RandomAccess &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>这个是一个标记接口，实现了该接口的类，表示了可以随机访问。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight gherkin"><table>]]>
    </summary>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/tags/java-util/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/categories/java-util/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之IndexOutOfBoundsException]]></title>
    <link href="http://jinpingwang.github.io/2015/10/31/javaSourceCode/java.lang/IndexOutOfBoundsException/"/>
    <id>http://jinpingwang.github.io/2015/10/31/javaSourceCode/java.lang/IndexOutOfBoundsException/</id>
    <published>2015-10-31T14:30:12.000Z</published>
    <updated>2015-12-31T01:52:23.050Z</updated>
    <content type="html"><![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">IndexOutOfBoundsException</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">RuntimeException</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	public <span class="type">IndexOutOfBoundsException</span>()&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">IndexOutOfBoundsException</span>(<span class="type">String</span> s)&#123;</span><br><span class="line">		<span class="keyword">super</span>(s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>这个是一个异常类，主要是用于抛出index不合法的异常。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight scala"><table><t]]>
    </summary>
    
      <category term="java.lang" scheme="http://jinpingwang.github.io/tags/java-lang/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.lang" scheme="http://jinpingwang.github.io/categories/java-lang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之Cloneable]]></title>
    <link href="http://jinpingwang.github.io/2015/10/31/javaSourceCode/java.lang/Cloneable/"/>
    <id>http://jinpingwang.github.io/2015/10/31/javaSourceCode/java.lang/Cloneable/</id>
    <published>2015-10-31T13:31:11.000Z</published>
    <updated>2015-12-31T01:48:07.392Z</updated>
    <content type="html"><![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package java.lang;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * x.clone<span class="literal">()</span>!=x 为<span class="literal">true</span>,就是说他们不是同一个对象.</span><br><span class="line"> * x.clone<span class="literal">()</span>.getClass<span class="literal">()</span>==x.getClass<span class="literal">()</span> 为<span class="literal">true</span>,他们是同一个类型<span class="type">Class</span>.</span><br><span class="line"> * x.equals(x.clone<span class="literal">()</span>) 为<span class="literal">true</span>,逻辑上应该相当.</span><br><span class="line"> */</span><br><span class="line">public interface <span class="type">Cloneable</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>这个接口没有定义任何方法，其实只是作为一个标记而已</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight sml"><table><tr>]]>
    </summary>
    
      <category term="java.lang" scheme="http://jinpingwang.github.io/tags/java-lang/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.lang" scheme="http://jinpingwang.github.io/categories/java-lang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之AbstractCollection]]></title>
    <link href="http://jinpingwang.github.io/2015/10/31/javaSourceCode/java.util/AbstractCollection/"/>
    <id>http://jinpingwang.github.io/2015/10/31/javaSourceCode/java.util/AbstractCollection/</id>
    <published>2015-10-31T12:01:15.000Z</published>
    <updated>2015-12-31T01:44:27.843Z</updated>
    <content type="html"><![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> AbstractCollection&lt;E&gt; <span class="keyword">implements</span> Collection&lt;E&gt; &#123;</span><br><span class="line">	<span class="keyword">protected</span> AbstractCollection()&#123;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> Iterator&lt;E&gt; iterator();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="keyword">size</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> isEmpty()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">size</span>()==<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> add(E e)&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> contains(Object o)&#123;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">if</span>(java.util.Objects.equals(o, <span class="keyword">null</span>))&#123;</span><br><span class="line">			<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">if</span>(java.util.Objects.equals(it.<span class="keyword">next</span>(),<span class="keyword">null</span>))&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">if</span>(o.equals(it.<span class="keyword">next</span>()))&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> containsAll(Collection&lt;?&gt; c)&#123;</span><br><span class="line">		<span class="keyword">for</span>(Object e:c)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!contains(e))&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 这个函数只删除第一次出现的元素，后面的不删除</span><br><span class="line">	 * 如果要删除全部则，可以先用o创建一个Collection型</span><br><span class="line">	 * 的集合，然后用removeAll，就可以删除全部出现的</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o)&#123;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">if</span>(java.util.Objects.equals(o,<span class="keyword">null</span>))&#123;</span><br><span class="line">			<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">if</span>(it.<span class="keyword">next</span>().equals(o))&#123;</span><br><span class="line">					it.remove();</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">if</span>(it.<span class="keyword">next</span>().equals(o))&#123;</span><br><span class="line">					it.remove();</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> removeAll(Collection&lt;?&gt; c)&#123;</span><br><span class="line">		Objects.requireNonNull(c);</span><br><span class="line">		<span class="keyword">boolean</span> modified=<span class="keyword">false</span>;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			<span class="comment">//这里直接调用Collection接口中的contains</span></span><br><span class="line">			<span class="comment">//但Collection接口中的contains并没有实现</span></span><br><span class="line">			<span class="comment">//所以，这里的参数c是一个实现了Collection</span></span><br><span class="line">			<span class="comment">//接口的类对象，并且它实现了contains方法。</span></span><br><span class="line">			<span class="keyword">if</span>(c.contains(it.<span class="keyword">next</span>()))&#123;</span><br><span class="line">				it.remove();</span><br><span class="line">				modified=<span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modified;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> retainAll(Collection&lt;?&gt; c)&#123;</span><br><span class="line">		Objects.requireNonNull(c);</span><br><span class="line">		<span class="keyword">boolean</span> modified=<span class="keyword">false</span>;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			<span class="keyword">if</span>(!c.contains(it.<span class="keyword">next</span>()))&#123;</span><br><span class="line">				it.remove();</span><br><span class="line">				modified=<span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modified;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> clear()&#123;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			it.<span class="keyword">next</span>();</span><br><span class="line">			it.remove();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String toString()&#123;</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">if</span>(!it.hasNext())&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"[]"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">		sb.<span class="keyword">append</span>(<span class="string">"["</span>);</span><br><span class="line">		<span class="keyword">for</span>(;;)&#123;</span><br><span class="line">			E e=it.<span class="keyword">next</span>();</span><br><span class="line">			<span class="comment">/**</span><br><span class="line">			 * e为什么会等于this解析</span><br><span class="line">			 * 比如ArrayList没有使用泛型，就可以添加自己</span><br><span class="line">			 * ArrayList als=new ArrayList();</span><br><span class="line">			 * als.add("hello");</span><br><span class="line">			 * als.add("world");</span><br><span class="line">			 * als.add(als);</span><br><span class="line">			 * System.out.println(als);</span><br><span class="line">			 */</span></span><br><span class="line">			sb.<span class="keyword">append</span>(e==<span class="keyword">this</span>? <span class="string">"(this Collection"</span> :e);</span><br><span class="line">			<span class="keyword">if</span>(!it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">return</span> sb.<span class="keyword">append</span>(<span class="string">"]"</span>).toString();</span><br><span class="line">			&#125;</span><br><span class="line">			sb.<span class="keyword">append</span>(<span class="string">","</span>).<span class="keyword">append</span>(<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 里面的finishToArray函数不理解</span><br><span class="line">	 * 数组r的长度为r.length,赋给i</span><br><span class="line">	 * 还可以r[i++]，不会报数组越界吗？</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Object[] toArray()&#123;</span><br><span class="line">		Object r[]=<span class="keyword">new</span> Object[<span class="keyword">size</span>()];</span><br><span class="line">		Iterator&lt;E&gt; it=iterator();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r.length;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!it.hasNext())&#123;</span><br><span class="line">				<span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//这里使用的是引用，说明如果对返回数组中的数据进行修改</span></span><br><span class="line">			<span class="comment">//同样会作用于原数据</span></span><br><span class="line">			r[i]=it.<span class="keyword">next</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> it.hasNext()?finishToArray(r,it):r;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 没看懂是啥意思</span><br><span class="line">	 */</span>	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T[] finishToArray(T[] r, Iterator&lt;?&gt; it) &#123;</span><br><span class="line">	        <span class="keyword">int</span> i = r.length;</span><br><span class="line">	        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">	            <span class="keyword">int</span> cap = r.length;</span><br><span class="line">	            <span class="keyword">if</span> (i == cap) &#123;</span><br><span class="line">	                <span class="keyword">int</span> newCap = cap + (cap &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	                <span class="comment">// overflow-conscious code</span></span><br><span class="line">	                <span class="keyword">if</span> (newCap - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">	                    newCap = hugeCapacity(cap + <span class="number">1</span>);</span><br><span class="line">	                r = Arrays.copyOf(r, newCap);</span><br><span class="line">	            &#125;</span><br><span class="line">	            r[i++] = (T)it.<span class="keyword">next</span>();</span><br><span class="line">	        &#125;</span><br><span class="line">	        <span class="comment">// trim if overallocated</span></span><br><span class="line">	        <span class="keyword">return</span> (i == r.length) ? r : Arrays.copyOf(r, i);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> hugeCapacity(<span class="keyword">int</span> minCapacity) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError</span><br><span class="line">                (<span class="string">"Required array size too large"</span>);</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 如果a的长度小于size，则a中的元素都为null</span><br><span class="line">	 * 如果a的长度大于size，则a中的前size个元素为iterator，超出的为null</span><br><span class="line">	 * 如果a的长度小于size，则返回的值是iterator中的元素</span><br><span class="line">	 * 如果a的长度大于size，则返回的值是iterator中的元素，其它(a.length-size())值为null</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">size</span> = <span class="keyword">size</span>();</span><br><span class="line">        T[] r = a.length &gt;= <span class="keyword">size</span> ? a :</span><br><span class="line">                  (T[])java.lang.reflect.Array</span><br><span class="line">                  .newInstance(a.getClass().getComponentType(), <span class="keyword">size</span>);</span><br><span class="line">        Iterator&lt;E&gt; it = iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (! it.hasNext()) &#123; <span class="comment">// fewer elements than expected</span></span><br><span class="line">                <span class="keyword">if</span> (a == r) &#123;</span><br><span class="line">                    r[i] = <span class="keyword">null</span>; <span class="comment">// null-terminate</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.length &lt; i) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.arraycopy(r, <span class="number">0</span>, a, <span class="number">0</span>, i);</span><br><span class="line">                    <span class="keyword">if</span> (a.length &gt; i) &#123;</span><br><span class="line">                        a[i] = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">            r[i] = (T)it.<span class="keyword">next</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// more elements than expected</span></span><br><span class="line">        <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> addAll(Collection&lt;? <span class="keyword">extends</span> E&gt; c)&#123;</span><br><span class="line">		<span class="keyword">boolean</span> modified=<span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(E e:c)&#123;</span><br><span class="line">			<span class="keyword">if</span>(add(e))&#123;</span><br><span class="line">				modified=<span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modified;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>这个抽象类最主要的方法是：<code>iterator(),size(),add()</code>。<br>其它的方法都是基于这三个来实现的。<br>因此这三个方法是抽象方法或者是抛出未定义异常。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight gradle"><table><]]>
    </summary>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/tags/java-util/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/categories/java-util/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之Collection]]></title>
    <link href="http://jinpingwang.github.io/2015/10/31/javaSourceCode/java.util/Collection/"/>
    <id>http://jinpingwang.github.io/2015/10/31/javaSourceCode/java.util/Collection/</id>
    <published>2015-10-31T04:37:41.000Z</published>
    <updated>2015-12-31T01:28:03.333Z</updated>
    <content type="html"><![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">package java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.<span class="type">Predicate</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">interface</span> <span class="type">Collection</span>&lt;E&gt; extends <span class="type">Iterable</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> size();</span><br><span class="line">	</span><br><span class="line">	boolean isEmpty();</span><br><span class="line">	</span><br><span class="line">	boolean contains(<span class="type">Object</span> o);</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * <span class="type">Collection</span>&lt;E&gt;已经继承了<span class="type">Iterable</span>&lt;E&gt;</span><br><span class="line">	 * 而<span class="type">Iterable</span>&lt;E&gt;中已经定义了<span class="keyword">iterator</span>()</span><br><span class="line">	 * 这个函数接口了，之所以在<span class="type">Collection</span>&lt;E&gt;</span><br><span class="line">	 * 重新定义只是作为显示而已</span><br><span class="line">	 */</span><br><span class="line">	<span class="type">Iterator</span>&lt;E&gt; <span class="keyword">iterator</span>();</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 这个返回的值是一个复本</span><br><span class="line">	 */</span><br><span class="line">	<span class="type">Object</span>[] toArray();</span><br><span class="line">	</span><br><span class="line">	&lt;T&gt; T[] toArray(T[] a);</span><br><span class="line">	</span><br><span class="line">	//没有说明在哪个位置进行添加，因为集合没有位置的概念</span><br><span class="line">	boolean add(E e);</span><br><span class="line">	</span><br><span class="line">	//解释：源码中的@<span class="keyword">return</span>这一句：</span><br><span class="line">	//@<span class="keyword">return</span> &lt;tt&gt;<span class="literal">true</span>&lt;/tt&gt; <span class="keyword">if</span> an element was removed <span class="keyword">as</span> a <span class="literal">result</span> <span class="keyword">of</span> this call</span><br><span class="line">	//说的是删除一个元素，如果有多个重复的元素，应该是删除第一个出现的元素</span><br><span class="line">	//同时也可以从<span class="type">AbstractCollection</span>中的remove函数看出来</span><br><span class="line">	boolean remove(<span class="type">Object</span> o);</span><br><span class="line">	</span><br><span class="line">	boolean containsAll(<span class="type">Collection</span>&lt;?&gt; c);</span><br><span class="line">	</span><br><span class="line">	boolean addAll(<span class="type">Collection</span>&lt;? extends E&gt; c);</span><br><span class="line">	</span><br><span class="line">	boolean removeAll(<span class="type">Collection</span>&lt;?&gt; c);</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 删除除了c里面的其它元素</span><br><span class="line">	 */</span><br><span class="line">	boolean retrainAll(<span class="type">Collection</span>&lt;?&gt; c);</span><br><span class="line">	</span><br><span class="line">	<span class="type">void</span> clear();</span><br><span class="line">	</span><br><span class="line">	boolean equals(<span class="type">Object</span> o);</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> hashCode();</span><br><span class="line">	</span><br><span class="line">	default boolean removeIf(<span class="type">Predicate</span>&lt;? super E&gt; filter)&#123;</span><br><span class="line">		<span class="type">Objects</span>.requireNonNull(filter);</span><br><span class="line">		boolean removed=<span class="literal">false</span>;</span><br><span class="line">		final <span class="type">Iterator</span>&lt;E&gt; each=<span class="keyword">iterator</span>();</span><br><span class="line">		<span class="keyword">while</span>(each.hasNext())&#123;</span><br><span class="line">			<span class="keyword">if</span>(filter.test(each.next()))&#123;</span><br><span class="line">				each.remove();</span><br><span class="line">				removed=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> removed;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>这个接口也挺简单的，定义了一些关于集合的方法。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight nimrod"><table><]]>
    </summary>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/tags/java-util/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/categories/java-util/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之Iterable]]></title>
    <link href="http://jinpingwang.github.io/2015/10/30/javaSourceCode/java.lang/Iterable/"/>
    <id>http://jinpingwang.github.io/2015/10/30/javaSourceCode/java.lang/Iterable/</id>
    <published>2015-10-30T03:17:45.000Z</published>
    <updated>2015-12-31T01:28:38.034Z</updated>
    <content type="html"><![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Iterator</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">interface</span> <span class="type">Iterable</span>&lt;T&gt; &#123;</span><br><span class="line">	<span class="type">Iterator</span>&lt;T&gt; <span class="keyword">iterator</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>这个接口很简单，也没什么好说的。有一点要提到的是，有了<code>Iterator</code>，为什么还要重复定义一个<code>Iterable</code>？<br>主要是因为，如果你继承了<code>Iterable</code>时，在实现<code>iterator()</code>方法时，比如你可以设置迭代器每次都从起始结点开始。即各迭代器是独立的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight nimrod"><table><]]>
    </summary>
    
      <category term="java.lang" scheme="http://jinpingwang.github.io/tags/java-lang/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.lang" scheme="http://jinpingwang.github.io/categories/java-lang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java源码之Iterator]]></title>
    <link href="http://jinpingwang.github.io/2015/10/30/javaSourceCode/java.util/Iterator/"/>
    <id>http://jinpingwang.github.io/2015/10/30/javaSourceCode/java.util/Iterator/</id>
    <published>2015-10-30T02:07:21.000Z</published>
    <updated>2015-12-31T01:11:56.735Z</updated>
    <content type="html"><![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5256_u6790"><a href="#u5256_u6790" class="headerlink" title="剖析"></a>剖析</h3><p>Iterator<e>就是一个接口，很简单，没什么好讲的。要注意一点就是<br><code>forEachRemaining(Consumer&lt;? super E&gt; action)</code><br>这个方法是1.8版本才有的，之前的版本没有。</e></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr]]>
    </summary>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/tags/java-util/"/>
    
      <category term="java源码" scheme="http://jinpingwang.github.io/tags/java%E6%BA%90%E7%A0%81/"/>
    
      <category term="java.util" scheme="http://jinpingwang.github.io/categories/java-util/"/>
    
  </entry>
  
</feed>
